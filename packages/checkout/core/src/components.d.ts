/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IBoleto } from "./providers/Boleto";
import { ICustomer } from "./providers/BaseProvider";
import { PlugPaymentsBoletoChargeError, PlugPaymentsBoletoChargeSuccess } from "./components/plug-payments-boleto/plug-payments-boleto.types";
import { PlugPaymentsCreditChargeError, PlugPaymentsCreditChargeSuccess, PlugPaymentsCreditFormCustomStyleFormClasses, PlugPaymentsCreditFormValues, PlugPaymentsCreditInstallmentsConfig } from "./components/plug-payments-credit/plug-payments-credit.types";
import { IPix } from "./providers/Pix";
import { PlugPaymentsPixChargeError, PlugPaymentsPixChargeSuccess } from "./components/plug-payments-pix/plug-payments-pix.types";
export namespace Components {
    interface PlugPayments {
        "showCreditCard": boolean;
    }
    interface PlugPaymentsBoleto {
        "amount": number;
        "boleto": IBoleto;
        "capture": boolean;
        "clientId": string;
        "currency": string;
        "customer"?: ICustomer;
        "customerId"?: string;
        "description"?: string;
        "merchantId": string;
        "orderId"?: string;
        "publicKey": string;
        "sandbox": boolean;
        "statementDescriptor": string;
    }
    interface PlugPaymentsCredit {
        "amount": number;
        "capture": boolean;
        "clientId": string;
        "currency": string;
        "customFormStyleClasses"?: PlugPaymentsCreditFormCustomStyleFormClasses;
        "customerId"?: string;
        "description"?: string;
        "installmentsConfig": PlugPaymentsCreditInstallmentsConfig;
        "merchantId": string;
        "orderId"?: string;
        "publicKey": string;
        "sandbox": boolean;
        "showCreditCard": boolean;
        "statementDescriptor": string;
    }
    interface PlugPaymentsCreditForm {
        "amount": number;
        "customFormStyleClasses": PlugPaymentsCreditFormCustomStyleFormClasses;
        "formValues": PlugPaymentsCreditFormValues;
        "installmentsConfig": PlugPaymentsCreditInstallmentsConfig;
        "isLoading": boolean;
    }
    interface PlugPaymentsPix {
        "amount": number;
        "capture": boolean;
        "clientId": string;
        "currency": string;
        "customer"?: ICustomer;
        "customerId"?: string;
        "description"?: string;
        "merchantId": string;
        "orderId"?: string;
        "pix": IPix;
        "publicKey": string;
        "sandbox": boolean;
        "statementDescriptor": string;
    }
}
declare global {
    interface HTMLPlugPaymentsElement extends Components.PlugPayments, HTMLStencilElement {
    }
    var HTMLPlugPaymentsElement: {
        prototype: HTMLPlugPaymentsElement;
        new (): HTMLPlugPaymentsElement;
    };
    interface HTMLPlugPaymentsBoletoElement extends Components.PlugPaymentsBoleto, HTMLStencilElement {
    }
    var HTMLPlugPaymentsBoletoElement: {
        prototype: HTMLPlugPaymentsBoletoElement;
        new (): HTMLPlugPaymentsBoletoElement;
    };
    interface HTMLPlugPaymentsCreditElement extends Components.PlugPaymentsCredit, HTMLStencilElement {
    }
    var HTMLPlugPaymentsCreditElement: {
        prototype: HTMLPlugPaymentsCreditElement;
        new (): HTMLPlugPaymentsCreditElement;
    };
    interface HTMLPlugPaymentsCreditFormElement extends Components.PlugPaymentsCreditForm, HTMLStencilElement {
    }
    var HTMLPlugPaymentsCreditFormElement: {
        prototype: HTMLPlugPaymentsCreditFormElement;
        new (): HTMLPlugPaymentsCreditFormElement;
    };
    interface HTMLPlugPaymentsPixElement extends Components.PlugPaymentsPix, HTMLStencilElement {
    }
    var HTMLPlugPaymentsPixElement: {
        prototype: HTMLPlugPaymentsPixElement;
        new (): HTMLPlugPaymentsPixElement;
    };
    interface HTMLElementTagNameMap {
        "plug-payments": HTMLPlugPaymentsElement;
        "plug-payments-boleto": HTMLPlugPaymentsBoletoElement;
        "plug-payments-credit": HTMLPlugPaymentsCreditElement;
        "plug-payments-credit-form": HTMLPlugPaymentsCreditFormElement;
        "plug-payments-pix": HTMLPlugPaymentsPixElement;
    }
}
declare namespace LocalJSX {
    interface PlugPayments {
        "showCreditCard"?: boolean;
    }
    interface PlugPaymentsBoleto {
        "amount"?: number;
        "boleto"?: IBoleto;
        "capture"?: boolean;
        "clientId"?: string;
        "currency"?: string;
        "customer"?: ICustomer;
        "customerId"?: string;
        "description"?: string;
        "merchantId"?: string;
        "onPaymentFailed"?: (event: CustomEvent<{
    error: PlugPaymentsBoletoChargeError
  }>) => void;
        "onPaymentSuccess"?: (event: CustomEvent<{
    data: PlugPaymentsBoletoChargeSuccess
  }>) => void;
        "orderId"?: string;
        "publicKey"?: string;
        "sandbox"?: boolean;
        "statementDescriptor"?: string;
    }
    interface PlugPaymentsCredit {
        "amount"?: number;
        "capture"?: boolean;
        "clientId"?: string;
        "currency"?: string;
        "customFormStyleClasses"?: PlugPaymentsCreditFormCustomStyleFormClasses;
        "customerId"?: string;
        "description"?: string;
        "installmentsConfig"?: PlugPaymentsCreditInstallmentsConfig;
        "merchantId"?: string;
        "onPaymentFailed"?: (event: CustomEvent<{
    error: PlugPaymentsCreditChargeError
  }>) => void;
        "onPaymentSuccess"?: (event: CustomEvent<{
    data: PlugPaymentsCreditChargeSuccess
  }>) => void;
        "orderId"?: string;
        "publicKey"?: string;
        "sandbox"?: boolean;
        "showCreditCard"?: boolean;
        "statementDescriptor"?: string;
    }
    interface PlugPaymentsCreditForm {
        "amount"?: number;
        "customFormStyleClasses"?: PlugPaymentsCreditFormCustomStyleFormClasses;
        "formValues"?: PlugPaymentsCreditFormValues;
        "installmentsConfig"?: PlugPaymentsCreditInstallmentsConfig;
        "isLoading"?: boolean;
        "onFieldChange"?: (event: CustomEvent<{ field: string; value: string }>) => void;
        "onFormSubmit"?: (event: CustomEvent<void>) => void;
    }
    interface PlugPaymentsPix {
        "amount"?: number;
        "capture"?: boolean;
        "clientId"?: string;
        "currency"?: string;
        "customer"?: ICustomer;
        "customerId"?: string;
        "description"?: string;
        "merchantId"?: string;
        "onPaymentFailed"?: (event: CustomEvent<{
    error: PlugPaymentsPixChargeError
  }>) => void;
        "onPaymentSuccess"?: (event: CustomEvent<{
    data: PlugPaymentsPixChargeSuccess
  }>) => void;
        "orderId"?: string;
        "pix"?: IPix;
        "publicKey"?: string;
        "sandbox"?: boolean;
        "statementDescriptor"?: string;
    }
    interface IntrinsicElements {
        "plug-payments": PlugPayments;
        "plug-payments-boleto": PlugPaymentsBoleto;
        "plug-payments-credit": PlugPaymentsCredit;
        "plug-payments-credit-form": PlugPaymentsCreditForm;
        "plug-payments-pix": PlugPaymentsPix;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "plug-payments": LocalJSX.PlugPayments & JSXBase.HTMLAttributes<HTMLPlugPaymentsElement>;
            "plug-payments-boleto": LocalJSX.PlugPaymentsBoleto & JSXBase.HTMLAttributes<HTMLPlugPaymentsBoletoElement>;
            "plug-payments-credit": LocalJSX.PlugPaymentsCredit & JSXBase.HTMLAttributes<HTMLPlugPaymentsCreditElement>;
            "plug-payments-credit-form": LocalJSX.PlugPaymentsCreditForm & JSXBase.HTMLAttributes<HTMLPlugPaymentsCreditFormElement>;
            "plug-payments-pix": LocalJSX.PlugPaymentsPix & JSXBase.HTMLAttributes<HTMLPlugPaymentsPixElement>;
        }
    }
}
