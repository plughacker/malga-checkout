/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CheckoutIconNames } from "./components/checkout-icon/checkout-icon.types";
import { CheckoutButtonType } from "./components/checkout-button/checkout-button.types";
import { CheckoutInputChangeEvent, CheckoutInputMode, CheckoutInputType, CheckoutInputValue } from "./components/checkout-input/checkout-input.types";
import { CheckoutManualPaymentDescriptions } from "./components/checkout-manual-payment/checkout-manual-payment.types";
import { Product } from "./components/checkout-order-summary/checkout-order-summary.types";
import { CheckoutRadioFieldChangeEvent, CheckoutRadioFieldValue } from "./components/checkout-radio-field/checkout-radio-field.types";
import { CheckoutSelectChangeEvent, CheckoutSelectOptions, CheckoutSelectValue } from "./components/checkout-select/checkout-select.types";
import { CheckoutSelectFieldChangeEvent, CheckoutSelectFieldOptions, CheckoutSelectFieldValue } from "./components/checkout-select-field/checkout-select-field.types";
import { CheckoutTextFieldChangeEvent, CheckoutTextFieldMode, CheckoutTextFieldType, CheckoutTextFieldValue } from "./components/checkout-text-field/checkout-text-field.types";
import { CheckoutTypographyColor, CheckoutTypographyVariation } from "./components/checkout-typography/checkout-typography.types";
export namespace Components {
    interface CheckoutAccordion {
        "contentHeight"?: string;
        "fullWidth": boolean;
        "isEditable": boolean;
        "label": string;
        "opened": boolean;
    }
    interface CheckoutButton {
        "customClass"?: string;
        "disabled"?: boolean;
        "fullWidth"?: boolean;
        "icon"?: CheckoutIconNames;
        "isLoading"?: boolean;
        "label": string;
        "type"?: CheckoutButtonType;
    }
    interface CheckoutCreditCard {
        "cvv": string;
        "expiry": string;
        "focused": string;
        "issuer": string;
        "locale": { valid: string };
        "name": string;
        "number": string;
        "placeholders": { name: string };
    }
    interface CheckoutErrorMessage {
        "customClass"?: string;
        "fullWidth": boolean;
        "message": string;
    }
    interface CheckoutIcon {
        "class"?: string;
        "icon": CheckoutIconNames;
    }
    interface CheckoutInput {
        "autofocus": boolean;
        "customContainerClass"?: string;
        "customInputClass"?: string;
        "customLabelClass"?: string;
        "disabled": boolean;
        "fullWidth": boolean;
        "hasError"?: boolean;
        "hasValidation"?: boolean;
        "inputmode": CheckoutInputMode;
        "label"?: string;
        "mask"?: string;
        "max"?: string;
        "maxlength"?: number;
        "min"?: string;
        "minlength"?: number;
        "multiple"?: boolean;
        "name": string;
        "placeholder"?: string;
        "readonly": boolean;
        "required": boolean;
        "startIcon"?: CheckoutIconNames;
        "type": CheckoutInputType;
        "value"?: CheckoutInputValue;
    }
    interface CheckoutManualPayment {
        "fullWidth": boolean;
        "paymentMethod": CheckoutManualPaymentDescriptions;
    }
    interface CheckoutOrderSummary {
        "amount": number;
        "fullWidth": boolean;
        "label": string;
        "products"?: Product[];
    }
    interface CheckoutRadioField {
        "customContainerClass"?: string;
        "customInputClass"?: string;
        "customLabelClass"?: string;
        "fullWidth": boolean;
        "isChecked": boolean;
        "label": string;
        "value"?: CheckoutRadioFieldValue;
    }
    interface CheckoutSelect {
        "autofocus": boolean;
        "customContainerClass"?: string;
        "customLabelClass"?: string;
        "customSelectClass"?: string;
        "disabled": boolean;
        "fullWidth": boolean;
        "hasError"?: boolean;
        "hasValidation": boolean;
        "label"?: string;
        "name": string;
        "options": CheckoutSelectOptions[];
        "placeholder"?: string;
        "readonly": boolean;
        "required": boolean;
        "startIcon"?: CheckoutIconNames;
        "value"?: CheckoutSelectValue;
    }
    interface CheckoutSelectField {
        "autofocus": boolean;
        "customContainerClass"?: string;
        "customLabelClass"?: string;
        "customSelectClass"?: string;
        "disabled": boolean;
        "fullWidth": boolean;
        "hasError"?: boolean;
        "label"?: string;
        "name": string;
        "noneOptionLabel": string;
        "options": CheckoutSelectFieldOptions[];
        "placeholder"?: string;
        "readonly": boolean;
        "required": boolean;
        "value"?: CheckoutSelectFieldValue;
    }
    interface CheckoutTextField {
        "autofocus": boolean;
        "customContainerClass"?: string;
        "customInputClass"?: string;
        "customLabelClass"?: string;
        "disabled": boolean;
        "fullWidth": boolean;
        "hasError"?: boolean;
        "hasValidation"?: boolean;
        "inputmode": CheckoutTextFieldMode;
        "label"?: string;
        "mask"?: string;
        "max"?: string;
        "maxlength"?: number;
        "min"?: string;
        "minlength"?: number;
        "multiple"?: boolean;
        "name": string;
        "placeholder"?: string;
        "readonly": boolean;
        "required": boolean;
        "startIcon"?: CheckoutIconNames;
        "type": CheckoutTextFieldType;
        "value"?: CheckoutTextFieldValue;
    }
    interface CheckoutTypography {
        "color": CheckoutTypographyColor;
        "content": string;
        "tag": string;
        "variation": CheckoutTypographyVariation;
    }
}
declare global {
    interface HTMLCheckoutAccordionElement extends Components.CheckoutAccordion, HTMLStencilElement {
    }
    var HTMLCheckoutAccordionElement: {
        prototype: HTMLCheckoutAccordionElement;
        new (): HTMLCheckoutAccordionElement;
    };
    interface HTMLCheckoutButtonElement extends Components.CheckoutButton, HTMLStencilElement {
    }
    var HTMLCheckoutButtonElement: {
        prototype: HTMLCheckoutButtonElement;
        new (): HTMLCheckoutButtonElement;
    };
    interface HTMLCheckoutCreditCardElement extends Components.CheckoutCreditCard, HTMLStencilElement {
    }
    var HTMLCheckoutCreditCardElement: {
        prototype: HTMLCheckoutCreditCardElement;
        new (): HTMLCheckoutCreditCardElement;
    };
    interface HTMLCheckoutErrorMessageElement extends Components.CheckoutErrorMessage, HTMLStencilElement {
    }
    var HTMLCheckoutErrorMessageElement: {
        prototype: HTMLCheckoutErrorMessageElement;
        new (): HTMLCheckoutErrorMessageElement;
    };
    interface HTMLCheckoutIconElement extends Components.CheckoutIcon, HTMLStencilElement {
    }
    var HTMLCheckoutIconElement: {
        prototype: HTMLCheckoutIconElement;
        new (): HTMLCheckoutIconElement;
    };
    interface HTMLCheckoutInputElement extends Components.CheckoutInput, HTMLStencilElement {
    }
    var HTMLCheckoutInputElement: {
        prototype: HTMLCheckoutInputElement;
        new (): HTMLCheckoutInputElement;
    };
    interface HTMLCheckoutManualPaymentElement extends Components.CheckoutManualPayment, HTMLStencilElement {
    }
    var HTMLCheckoutManualPaymentElement: {
        prototype: HTMLCheckoutManualPaymentElement;
        new (): HTMLCheckoutManualPaymentElement;
    };
    interface HTMLCheckoutOrderSummaryElement extends Components.CheckoutOrderSummary, HTMLStencilElement {
    }
    var HTMLCheckoutOrderSummaryElement: {
        prototype: HTMLCheckoutOrderSummaryElement;
        new (): HTMLCheckoutOrderSummaryElement;
    };
    interface HTMLCheckoutRadioFieldElement extends Components.CheckoutRadioField, HTMLStencilElement {
    }
    var HTMLCheckoutRadioFieldElement: {
        prototype: HTMLCheckoutRadioFieldElement;
        new (): HTMLCheckoutRadioFieldElement;
    };
    interface HTMLCheckoutSelectElement extends Components.CheckoutSelect, HTMLStencilElement {
    }
    var HTMLCheckoutSelectElement: {
        prototype: HTMLCheckoutSelectElement;
        new (): HTMLCheckoutSelectElement;
    };
    interface HTMLCheckoutSelectFieldElement extends Components.CheckoutSelectField, HTMLStencilElement {
    }
    var HTMLCheckoutSelectFieldElement: {
        prototype: HTMLCheckoutSelectFieldElement;
        new (): HTMLCheckoutSelectFieldElement;
    };
    interface HTMLCheckoutTextFieldElement extends Components.CheckoutTextField, HTMLStencilElement {
    }
    var HTMLCheckoutTextFieldElement: {
        prototype: HTMLCheckoutTextFieldElement;
        new (): HTMLCheckoutTextFieldElement;
    };
    interface HTMLCheckoutTypographyElement extends Components.CheckoutTypography, HTMLStencilElement {
    }
    var HTMLCheckoutTypographyElement: {
        prototype: HTMLCheckoutTypographyElement;
        new (): HTMLCheckoutTypographyElement;
    };
    interface HTMLElementTagNameMap {
        "checkout-accordion": HTMLCheckoutAccordionElement;
        "checkout-button": HTMLCheckoutButtonElement;
        "checkout-credit-card": HTMLCheckoutCreditCardElement;
        "checkout-error-message": HTMLCheckoutErrorMessageElement;
        "checkout-icon": HTMLCheckoutIconElement;
        "checkout-input": HTMLCheckoutInputElement;
        "checkout-manual-payment": HTMLCheckoutManualPaymentElement;
        "checkout-order-summary": HTMLCheckoutOrderSummaryElement;
        "checkout-radio-field": HTMLCheckoutRadioFieldElement;
        "checkout-select": HTMLCheckoutSelectElement;
        "checkout-select-field": HTMLCheckoutSelectFieldElement;
        "checkout-text-field": HTMLCheckoutTextFieldElement;
        "checkout-typography": HTMLCheckoutTypographyElement;
    }
}
declare namespace LocalJSX {
    interface CheckoutAccordion {
        "contentHeight"?: string;
        "fullWidth"?: boolean;
        "isEditable"?: boolean;
        "label"?: string;
        "onExpandClick"?: (event: CustomEvent<void>) => void;
        "opened"?: boolean;
    }
    interface CheckoutButton {
        "customClass"?: string;
        "disabled"?: boolean;
        "fullWidth"?: boolean;
        "icon"?: CheckoutIconNames;
        "isLoading"?: boolean;
        "label"?: string;
        "onBlured"?: (event: CustomEvent<void>) => void;
        "onClicked"?: (event: CustomEvent<void>) => void;
        "onFocused"?: (event: CustomEvent<void>) => void;
        "type"?: CheckoutButtonType;
    }
    interface CheckoutCreditCard {
        "cvv"?: string;
        "expiry"?: string;
        "focused"?: string;
        "issuer"?: string;
        "locale"?: { valid: string };
        "name"?: string;
        "number"?: string;
        "placeholders"?: { name: string };
    }
    interface CheckoutErrorMessage {
        "customClass"?: string;
        "fullWidth"?: boolean;
        "message"?: string;
    }
    interface CheckoutIcon {
        "class"?: string;
        "icon"?: CheckoutIconNames;
    }
    interface CheckoutInput {
        "autofocus"?: boolean;
        "customContainerClass"?: string;
        "customInputClass"?: string;
        "customLabelClass"?: string;
        "disabled"?: boolean;
        "fullWidth"?: boolean;
        "hasError"?: boolean;
        "hasValidation"?: boolean;
        "inputmode"?: CheckoutInputMode;
        "label"?: string;
        "mask"?: string;
        "max"?: string;
        "maxlength"?: number;
        "min"?: string;
        "minlength"?: number;
        "multiple"?: boolean;
        "name"?: string;
        "onBlurred"?: (event: CustomEvent<FocusEvent>) => void;
        "onChanged"?: (event: CustomEvent<CheckoutInputChangeEvent>) => void;
        "onFocused"?: (event: CustomEvent<FocusEvent>) => void;
        "onInputed"?: (event: CustomEvent<KeyboardEvent>) => void;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "startIcon"?: CheckoutIconNames;
        "type"?: CheckoutInputType;
        "value"?: CheckoutInputValue;
    }
    interface CheckoutManualPayment {
        "fullWidth"?: boolean;
        "onPaymentClick"?: (event: CustomEvent<void>) => void;
        "paymentMethod"?: CheckoutManualPaymentDescriptions;
    }
    interface CheckoutOrderSummary {
        "amount"?: number;
        "fullWidth"?: boolean;
        "label"?: string;
        "products"?: Product[];
    }
    interface CheckoutRadioField {
        "customContainerClass"?: string;
        "customInputClass"?: string;
        "customLabelClass"?: string;
        "fullWidth"?: boolean;
        "isChecked"?: boolean;
        "label"?: string;
        "onChanged"?: (event: CustomEvent<CheckoutRadioFieldChangeEvent>) => void;
        "onClicked"?: (event: CustomEvent<MouseEvent>) => void;
        "onInputed"?: (event: CustomEvent<KeyboardEvent>) => void;
        "value"?: CheckoutRadioFieldValue;
    }
    interface CheckoutSelect {
        "autofocus"?: boolean;
        "customContainerClass"?: string;
        "customLabelClass"?: string;
        "customSelectClass"?: string;
        "disabled"?: boolean;
        "fullWidth"?: boolean;
        "hasError"?: boolean;
        "hasValidation"?: boolean;
        "label"?: string;
        "name"?: string;
        "onBlurred"?: (event: CustomEvent<void>) => void;
        "onChanged"?: (event: CustomEvent<CheckoutSelectChangeEvent>) => void;
        "onFocused"?: (event: CustomEvent<void>) => void;
        "onInputed"?: (event: CustomEvent<KeyboardEvent>) => void;
        "options"?: CheckoutSelectOptions[];
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "startIcon"?: CheckoutIconNames;
        "value"?: CheckoutSelectValue;
    }
    interface CheckoutSelectField {
        "autofocus"?: boolean;
        "customContainerClass"?: string;
        "customLabelClass"?: string;
        "customSelectClass"?: string;
        "disabled"?: boolean;
        "fullWidth"?: boolean;
        "hasError"?: boolean;
        "label"?: string;
        "name"?: string;
        "noneOptionLabel"?: string;
        "onBlurred"?: (event: CustomEvent<void>) => void;
        "onChanged"?: (event: CustomEvent<CheckoutSelectFieldChangeEvent>) => void;
        "onFocused"?: (event: CustomEvent<void>) => void;
        "onInputed"?: (event: CustomEvent<KeyboardEvent>) => void;
        "options"?: CheckoutSelectFieldOptions[];
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "value"?: CheckoutSelectFieldValue;
    }
    interface CheckoutTextField {
        "autofocus"?: boolean;
        "customContainerClass"?: string;
        "customInputClass"?: string;
        "customLabelClass"?: string;
        "disabled"?: boolean;
        "fullWidth"?: boolean;
        "hasError"?: boolean;
        "hasValidation"?: boolean;
        "inputmode"?: CheckoutTextFieldMode;
        "label"?: string;
        "mask"?: string;
        "max"?: string;
        "maxlength"?: number;
        "min"?: string;
        "minlength"?: number;
        "multiple"?: boolean;
        "name"?: string;
        "onBlurred"?: (event: CustomEvent<FocusEvent>) => void;
        "onChanged"?: (event: CustomEvent<CheckoutTextFieldChangeEvent>) => void;
        "onFocused"?: (event: CustomEvent<FocusEvent>) => void;
        "onInputed"?: (event: CustomEvent<KeyboardEvent>) => void;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "startIcon"?: CheckoutIconNames;
        "type"?: CheckoutTextFieldType;
        "value"?: CheckoutTextFieldValue;
    }
    interface CheckoutTypography {
        "color"?: CheckoutTypographyColor;
        "content"?: string;
        "tag"?: string;
        "variation"?: CheckoutTypographyVariation;
    }
    interface IntrinsicElements {
        "checkout-accordion": CheckoutAccordion;
        "checkout-button": CheckoutButton;
        "checkout-credit-card": CheckoutCreditCard;
        "checkout-error-message": CheckoutErrorMessage;
        "checkout-icon": CheckoutIcon;
        "checkout-input": CheckoutInput;
        "checkout-manual-payment": CheckoutManualPayment;
        "checkout-order-summary": CheckoutOrderSummary;
        "checkout-radio-field": CheckoutRadioField;
        "checkout-select": CheckoutSelect;
        "checkout-select-field": CheckoutSelectField;
        "checkout-text-field": CheckoutTextField;
        "checkout-typography": CheckoutTypography;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "checkout-accordion": LocalJSX.CheckoutAccordion & JSXBase.HTMLAttributes<HTMLCheckoutAccordionElement>;
            "checkout-button": LocalJSX.CheckoutButton & JSXBase.HTMLAttributes<HTMLCheckoutButtonElement>;
            "checkout-credit-card": LocalJSX.CheckoutCreditCard & JSXBase.HTMLAttributes<HTMLCheckoutCreditCardElement>;
            "checkout-error-message": LocalJSX.CheckoutErrorMessage & JSXBase.HTMLAttributes<HTMLCheckoutErrorMessageElement>;
            "checkout-icon": LocalJSX.CheckoutIcon & JSXBase.HTMLAttributes<HTMLCheckoutIconElement>;
            "checkout-input": LocalJSX.CheckoutInput & JSXBase.HTMLAttributes<HTMLCheckoutInputElement>;
            "checkout-manual-payment": LocalJSX.CheckoutManualPayment & JSXBase.HTMLAttributes<HTMLCheckoutManualPaymentElement>;
            "checkout-order-summary": LocalJSX.CheckoutOrderSummary & JSXBase.HTMLAttributes<HTMLCheckoutOrderSummaryElement>;
            "checkout-radio-field": LocalJSX.CheckoutRadioField & JSXBase.HTMLAttributes<HTMLCheckoutRadioFieldElement>;
            "checkout-select": LocalJSX.CheckoutSelect & JSXBase.HTMLAttributes<HTMLCheckoutSelectElement>;
            "checkout-select-field": LocalJSX.CheckoutSelectField & JSXBase.HTMLAttributes<HTMLCheckoutSelectFieldElement>;
            "checkout-text-field": LocalJSX.CheckoutTextField & JSXBase.HTMLAttributes<HTMLCheckoutTextFieldElement>;
            "checkout-typography": LocalJSX.CheckoutTypography & JSXBase.HTMLAttributes<HTMLCheckoutTypographyElement>;
        }
    }
}
